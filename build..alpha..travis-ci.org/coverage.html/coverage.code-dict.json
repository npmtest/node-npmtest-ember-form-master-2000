{"/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/test.js":"/* istanbul instrument in package npmtest_ember_form_master_2000 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/lib.npmtest_ember_form_master_2000.js":"/* istanbul instrument in package npmtest_ember_form_master_2000 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_form_master_2000 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_form_master_2000 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-form-master-2000 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_form_master_2000 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_form_master_2000\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_form_master_2000.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_form_master_2000.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_form_master_2000.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_form_master_2000.__dirname + '/lib.npmtest_ember_form_master_2000.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-form-master-2000',\n\n  isDevelopingAddon: function(){\n    return true;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/config/ember-try.js":"module.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        'ember': 'components/ember#release'\n      },\n      resolutions: {\n        'ember': 'release'\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'components/ember#beta'\n      },\n      resolutions: {\n        'ember': 'beta'\n      }\n    },\n    {\n      name: 'ember-canary',\n      dependencies: {\n        'ember': 'components/ember#canary'\n      },\n      resolutions: {\n        'ember': 'canary'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/components/fm-field.js":"import Ember from 'ember';\nimport layout from '../templates/components/fm-field';\n\nconst {computed, inject} = Ember;\nconst {alias} = computed;\n\nconst WIDGET_ATTR_ALIASES = [\n  'placeholder', 'maxlength', 'content', 'optionValuePath', 'name', 'tabindex',\n  'optionLabelPath', 'prompt', 'rows', 'cols', 'spellcheck', 'disabled', 'targetValue'\n];\n\nconst WidgetAttrs = Ember.Object.extend({\n  field: null,\n\n  /**\n   * Aliases properties on the `fm-field` component which should be\n   * passed into the field's widget as `widgetAttrs`.\n   *\n   * With Ember 2.3 adoption this should be phased out so that users\n   * pass `widgetAttrs` in directly using the `hash` helper.\n   *\n   * @method init\n   * @return {void}\n   **/\n  init(){\n    this._super();\n    WIDGET_ATTR_ALIASES.forEach(field => {\n      Ember.defineProperty(this, field, alias('field.' + field));\n    });\n  },\n});\n\n/**\n * @class FmField\n *\n * `fm-field` controls the functionality of the form field.  It should not\n * do anything relating to the style or appearance of the field.  That is the\n * responsibility of the `display` component.\n **/\nexport default Ember.Component.extend({\n  layout,\n  tagName: '',\n  isFocused: false,\n  isValid: false,\n\n  display: computed('widget', function(){\n    const widget = this.get('widget');\n    if (widget === 'checkbox'){\n      return 'checkbox';\n    } else if (widget === 'radio'){\n      return 'radio';\n    } else if (widget === 'radio-group'){\n      return 'radio-group';\n    } else {\n      return 'default';\n    }\n  }),\n\n  displayName: computed(function() {\n    return this.get('fmConfig.displayBasePath') + this.get('display');\n  }),\n\n  placeholder: null,\n  label: null,\n  helptext: null,\n  value: null,\n\n  fmConfig: inject.service('fm-config'),\n\n  init() {\n    const dataAttributes = Object.keys(this.get('attrs'))\n      .filter(attr => /data-/.test(attr));\n\n    this.set('dataAttributes', dataAttributes);\n\n    this._super(arguments);\n  },\n\n  widgetAttrs: computed(function(){\n    // hack to support legacy apis\n    return WidgetAttrs.create({ field: this });\n  }),\n\n  widget: 'input',\n\n  widgetName: computed('widget', function(){\n    return this.get('fmConfig.widgetBasePath') + this.get('widget');\n  }),\n\n  generateSafeId(id) {\n    const tmp = document.createElement(\"DIV\");\n    tmp.innerHTML = id;\n    id = tmp.textContent || tmp.innerText || \"\";\n    id = id.replace(/[\\.,\\/#!$%\\^&\\*;:{}=\\`'\"~()]/g,\"\");\n    id = id.replace(/\\s/g, \"-\");\n    return id;\n  },\n\n  shouldShowErrors: computed('fmConfig.showErrorsByDefault', function() {\n    return this.get('fmConfig.showErrorsByDefault');\n  }),\n\n  visibleErrors: computed('shouldShowErrors', 'errors.[]', function(){\n    return !!this.get('shouldShowErrors') ? this.get('errors') : [];\n  }),\n\n  actions: {\n\n    onKeyUp(e, instance) {\n      this.sendAction('onKeyUp', e, instance);\n    },\n\n    onBlur(e, instance) {\n      this.set('isFocused', false);\n      this.sendAction('onBlur', e, instance);\n    },\n\n    onFocus(e, instance) {\n      this.set('isFocused', true);\n      this.sendAction('onFocus', e, instance);\n    },\n\n    userInteraction() {\n      this.set('shouldShowErrors', true);\n      if (this.attrs.onUserInteraction && typeof this.attrs.onUserInteraction === 'function'){\n        this.attrs.onUserInteraction();\n      }\n    },\n\n    registerWidgetId(id){\n      this.set('forAttribute', id);\n    }\n\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/components/fm-form.js":"import Ember from 'ember';\n\nconst {inject, computed} = Ember;\nconst {reads} = computed;\n\nexport default Ember.Component.extend({\n  init() {\n    this._super();\n  },\n  classNameBindings: ['formClass'],\n  formClass: reads('fmConfig.formClass'),\n  fmConfig: inject.service('fm-config'),\n  tagName: 'form',\n  'for': null,\n\n  submit(e) {\n    e.preventDefault();\n    this.get('childViews').forEach(childView => {\n      if (childView.get('shouldShowErrors') === false) {\n        childView.set('shouldShowErrors', true);\n      }\n    });\n    this.sendAction('action', this.get('for'));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/components/fm-submit.js":"import Ember from 'ember';\nimport layout from '../templates/components/fm-submit';\n\nconst {inject, computed} = Ember;\nconst {reads} = computed;\n\nexport default Ember.Component.extend({\n  layout: layout,\n  classNameBindings: ['wrapperClass'],\n  fmConfig: inject.service('fm-config'),\n  init() {\n    this._super(this);\n  },\n  submitButtonClass: reads('fmConfig.submitButtonClass'),\n  wrapperClass: reads('fmConfig.wrapperClass'),\n  tagName: 'div'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/helpers/is-equal.js":"import Ember from 'ember';\n\nfunction isEqualHelper(params) {\n  return params[0] === params[1];\n}\n\nvar forExport = null;\nif(typeof Ember.HTMLBars.makeBoundHelper === 'function') {\n  forExport = Ember.Helper.helper(isEqualHelper);\n}else{\n  forExport = Ember.Handlebars.makeBoundHelper(isEqualHelper);\n}\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/helpers/is-not.js":"import Ember from 'ember';\n\nfunction isNotHelper(params) {\n  return !params[0];\n}\n\nvar forExport = null;\nif(typeof Ember.HTMLBars.makeBoundHelper === 'function') {\n  forExport = Ember.Helper.helper(isNotHelper);\n}else{\n  forExport = Ember.Handlebars.makeBoundHelper(isNotHelper);\n}\nexport default forExport;\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/initializers/ember-form-master-2000.js":"export function initialize(/* container, application */) {\n  // application.inject('route', 'foo', 'service:foo');\n}\n\nexport default {\n  name: 'ember-form-master-2000',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/mixins/data-attribute-support.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n\n  //setDataAttributes: Ember.observer('dataAttributes.[]', function() {\n    //var dataAttributes = this.get('dataAttributes');\n    //if(Ember.isArray(dataAttributes)) {\n      //dataAttributes.forEach((attr)=> {\n        //this.get('attributeBindings').push(attr);\n        //this.set(attr, this.get('parentView.' + attr));\n      //});\n    //}\n  //})\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/addon/services/fm-config.js":"import Ember from 'ember';\n\nexport default Ember.Service.extend({\n  widgetBasePath: 'fm-widgets/',\n  displayBasePath: 'fm-displays/',\n  submitButtonClass: 'btn btn-primary',\n  errorClass: 'has-error',\n  wrapperClass: 'form-group',\n  labelClass: 'control-label',\n  inputClass: 'form-control',\n  textareaClass: 'form-control',\n  selectClass: 'form-control',\n  formClass: 'form-vertical',\n  checkboxWrapperClass: 'form-group',\n  focusClass: 'is-focused',\n  radioClass: 'radio',\n  helptextClass: 'help-block',\n  errortextClass: 'help-block',\n  isValidClass: 'is-valid',\n\n  /*\n  *   If true, always show validation errors. If false, wait until some sort of\n  *   user interaction on each field before showing errors.\n  */\n  showErrorsByDefault: true\n});\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/app/components/fm-field.js":"import FmFieldComponent from 'ember-form-master-2000/components/fm-field';\nexport default FmFieldComponent;","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/app/components/fm-form.js":"import FmFormComponent from 'ember-form-master-2000/components/fm-form';\nexport default FmFormComponent;","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/app/components/fm-submit.js":"import FmSubmitComponent from 'ember-form-master-2000/components/fm-submit';\nexport default FmSubmitComponent;","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/app/helpers/is-equal.js":"import isEqualHelper from 'ember-form-master-2000/helpers/is-equal';\nexport default isEqualHelper;","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/app/helpers/is-not.js":"import isNotHelper from 'ember-form-master-2000/helpers/is-not';\nexport default isNotHelper;","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/app/initializers/ember-form-master-2000.js":"import Ember from 'ember';\n\nif(Ember.libraries) {\n  Ember.libraries.register('Ember Form Master 2000', '3.0.8');\n}\n\nexport { default, initialize } from 'ember-form-master-2000/initializers/ember-form-master-2000';\n","/home/travis/build/npmtest/node-npmtest-ember-form-master-2000/node_modules/ember-form-master-2000/app/services/fm-config.js":"export { default } from 'ember-form-master-2000/services/fm-config';"}